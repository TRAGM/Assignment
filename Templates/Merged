//Authors: Gavin Lindsay and Philip Mooney
//Team Computing Robotics Project
//Date completed: 28th April 2015

#pragma config(Sensor, S1,     touchSensor,    sensorTouch)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     soundSensor,    sensorSoundDB)
#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)


//Assignment defines
//Speed
#define SPEED 20
#define SPINSPEED 20
//Measurements
#define DIAMWHEEL 56
#define DIAMBASE 110


//Assignment prototypes
//Number stuff
bool checkForObst(int *X);
bool checkForObstStart(void);
void recordPosStart(int *blockX, int *blockY, int *curPosX, int *curPosY);
void recordPosUp(int *blockX, int *blockY, int *curPosX, int *curPosY);
void recordPosDown(int *blockX, int *blockY, int *curPosX, int *curPosY);

//Manoeuvring
//Spinning
void spinEncoder (float degrees);
//Waiting
void waitSec(float seconds);
void stop (void);
void stopFor (float seconds);
//Moving straight
void straightForDist (int dist);
void straightForDistRev (int dist);
void straightForBlock (void);
void straightForBlockRev (void);
//Avoiding
void obstacleEncounter(void);
int checkSidesForBox (void);

task main()
{
	//Block coord varialbes. -1 because no block will be placed in a negative cell
	int block1X=-1;
	int block1Y=-1;
	int block2X=-1;
	int block2Y=-1;
	int block1YPythag=-1;
	int block2YPythag=-1;
	float nearestDist=-1;
	int nearestX=-1;
	int nearestY=-1;
	//Starting point
	int curPosX=0;
	int curPosY=3;
	int foundBlockCount=0;
	int side;
	float radians;
	
	//Waiting at the start for a bit so all the motors/sensors start up
	waitSec(1);

	//Reversing into position
	while (SensorValue[lightSensor] > 35)
	{
		motor[motorB]=-SPEED;
		motor[motorC]=-SPEED;
	}//End while

	straightForDist(30);

	waitSec(1);

	//If the current line has an obstacle
	if (checkForObstStart())
	{
		foundBlockCount++;
		nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);
		waitSec(2);
		//Calling recordPosStart
		recordPosStart(&block1X,&block1Y,&curPosX,&curPosY);
	}//End if


	while (foundBlockCount<2)
	{
		//If bot is not on the 4th row, try go back
		if(curPosY!=3)
		{
			if ( curPosY <3)
			{
				spinEncoder(90);

				if (SensorValue[lightSensor]>35)
				{
					straightForBlock();
					curPosY++;
					spinEncoder(-90);
				}
				else
				{
					spinEncoder(-90);
				}//End if else
			}//End if

			if (curPosY>3)
			{
				spinEncoder(-90);

				if (SensorValue[lightSensor]>35)
				{
					straightForBlock();
					curPosY--;
					spinEncoder(90);
				}
				else
				{
					spinEncoder(90);
				}//End if else
			}//End outer if
		}//End most outer if

		//Looking North
		spinEncoder(-90);

		stopFor(0.5);

		if ( checkForObst(&curPosX))
		{
			if (foundBlockCount==1)
			{
				recordPosUp(&block2X,&block2Y,&curPosX,&curPosY);
				foundBlockCount++;
				nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);
				waitSec(2);
			}
			else
			{
				recordPosUp(&block1X,&block1Y,&curPosX,&curPosY);
				foundBlockCount++;
				nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);
				waitSec(2);
			}//End if else
		}//End if

		//Looking south
		spinEncoder(-180);

		stopFor(0.5);
		
		if ( checkForObst(&curPosX) )
		{
			if (foundBlockCount==1)
			{
				recordPosDown(&block2X,&block2Y,&curPosX,&curPosY);
				foundBlockCount++;
				nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);
				waitSec(2);
			}
			else
			{
				recordPosDown(&block1X,&block1Y,&curPosX,&curPosY);
				foundBlockCount++;
				nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);
				waitSec(2);
			}//End if else
		}//End if
		nxtDisplayBigStringAt(0, 31,"%d",foundBlockCount);

		//looking east
		spinEncoder(-90);

		//Checking next block for black square/moving forward
		if (curPosX<9)
		{
			if (SensorValue[lightSensor]<35)
			{
				side=checkSidesForBox();

				//If the south block is empty
				if (side==3||side==0)
				{
					spinEncoder(-270);
					straightForBlock();
					curPosY++;
					spinEncoder(-90);
					straightForBlock();
					curPosX++;
				}
				else if(side==2)//North
				{
					spinEncoder(-90);
					straightForBlock();
					curPosY--;
					spinEncoder(-270);
					straightForBlock();
					curPosX++;
				}
				else if (side==1)//if both are black
				{
					//Just lose 5 marks and go over the block
					straightForBlock();
					curPosX++;
				}//End inner if else
			}
			else
			{
				straightForBlock();
				curPosX++;
			}//End outer if else

		}//End outer-most if else statement

	}//End while

	//360 turn just to indicate it's out of the loop, should not be in final version
	spinEncoder(360);


	//Returning to the start
	//First to the right row
	if (curPosY!=3)
	{
		if (curPosY>3)
		{
			spinEncoder(-90);

			while (curPosY!=3)
			{
				straightForBlock();
				curPosY--;
			}

			spinEncoder(-90);
		}//End if

		if (curPosY<3)
		{
			spinEncoder(90);

			while (curPosY!=3)
			{
				straightForBlock();
				curPosY++;
			}//End while

			spinEncoder(90);
		}//End if
	}
	else
	{
		spinEncoder(180);
	}//End if else



	while (curPosX!=0)
	{

		straightForBlock();
		curPosX--;
	}//End while

	//Look north
	spinEncoder(90);

	//Converting the positions to a way that can be compared by using Pythagorean theorem
	//3 is used for the original starting point, so reducing it by 3 should fix it.
	//If a block goes negative, the squaring in the Pythag will turn it positive again
	block1YPythag=block1Y-3;
	block2YPythag=block2Y-3;

	//Finding which one's the nearest
	if ( (float*)sqrt((block1X*block1X)+(block1YPythag+block1YPythag)) >
         (float*)sqrt((block2X*block2X)+(block2YPythag+block2YPythag)) )
	{
		//Then the 1st position is closer, store that
		nearestDist=sqrt((block1X*block1X)+(block1YPythag+block1YPythag));
		nearestX=block1X;
		nearestY=block1YPythag;

		//Displaying to Screen
		nxtDisplayCenteredTextLine(0, "Coordinates");
		nxtDisplayTextLine(1, "Nearest:");
		nxtDisplayTextLine(2, "X: %d Y: %d",nearestX,nearestY);
		nxtDisplayTextLine(3, "Farthest:");
		nxtDisplayTextLine(4, "X: %d Y: %d",block2X,block2Y);
	}
	else
	{
		//Then the 2nd position is closer, store that
		nearestDist=sqrt((block2X*block2X)+(block2YPythag+block2YPythag));
		nearestX=block2X;
		nearestY=block2Y;

		//Displaying to Screen
		nxtDisplayCenteredTextLine(0, "Coordinates");
		nxtDisplayTextLine(1, "Nearest:");
		nxtDisplayTextLine(2, "X: %d Y: %d",nearestX,nearestY);
		nxtDisplayTextLine(3, "Farthest:");
		nxtDisplayTextLine(4, "X: %d Y: %d",block1X,block1Y);
	}//End if else

	//Finding the number of degrees that need to be turned to get to the nearest

	//Checking to see if it needs to turn 90 degrees first
	if(nearestY>=3)
	{
		spinEncoder(90);
	}//End if

	//Finding the number of degrees to rotate
	//using (x/sinX) = (y/siny), the number of radians needed to rotate is asin(nearestY/nearestDist), so just change that to degrees
	radians=asin(nearestY/nearestDist);
	spinEncoder((radians*PI)/180);

	nxtDisplayTextLine(5, "Dist: %d",nearestDist);
	nxtDisplayTextLine(6, "Deg: %f",(radians*PI)/180);

	//Touching and returning
	straightForDist(nearestDist);
	straightForDistRev(nearestDist);
	stop();

	//Wait until manually stopped
	waitSec(100);

}//End main


//Implementing spinEncoder
//Spins a number of degrees (negative for anti-clockwise, positive for clockwise)
void spinEncoder(float degrees)
{
	float wheelDeg;
	float cirBase=DIAMBASE*PI;
	float cirWheel=DIAMWHEEL*PI;
	degrees-=2;

	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;

	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;

	wheelDeg=(degrees)*(cirBase/cirWheel);

	nMotorEncoderTarget[motorB]=wheelDeg;

	if (degrees<0)
	{
		motor[motorB] = SPINSPEED;
		motor[motorC] = -SPINSPEED;

		while (nMotorRunState[motorB] != runStateIdle)
		{
			//Idle function. Will prevent code execution until condition is satisfied.
		}//End while
	}
	else
	{
		motor[motorB] = -SPINSPEED;
		motor[motorC] = SPINSPEED;

		while (nMotorRunState[motorB] != runStateIdle)
		{
			//Idle function. Will prevent code execution until condition is satisfied.
		}//End while
	}//End if else


	stop(); //Hammertime!

}//End spinLeftEncoder


//Implementing waitSec
//Will wait for a specified amount of time
void waitSec(float seconds)
{
	wait1Msec(seconds*1000);
	
}//End waitSec



//Implementing stop
//Turns off motors entirely
void stop()
{
	motor[motorB] = 0;
	motor[motorC] = 0;
	
}//End stop


//Implementing stopFor
//Stops, then waits X number of seconds before continuing
void stopFor (float seconds)
{
	motor[motorB] = 0;
	motor[motorC] = 0;
	wait1Msec(seconds*1000);
	
}//End stopFor


//Implementing straightForDist
//Will move (dist)mm in a straight line.
void straightForDist(int dist)
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;
	float spins = (dist/(DIAMWHEEL*PI));

	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;

	while (nMotorEncoder[motorB] < (360*spins) )
	{
		motor[motorB] = 20;
		motor[motorC] = 20;
	}//End while

	nSyncedMotors=synchNone;

	stop();

}//End straightForDist


//Implementing straightForDistRev
//Will move (dist)mm in reverse in a straight line.
void straightForDistRev(int dist)
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;
	float spins = (dist/(DIAMWHEEL*PI));

	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;

	while (nMotorEncoder[motorB] > (360*(-spins)) )
	{
		motor[motorB] = -SPINSPEED;
		motor[motorC] = -SPINSPEED;
	}//End while

	nSyncedMotors=synchNone;

}//End straightForDistRev


//Implementing straightForBlock
//Moves straight forward one block
void straightForBlock()
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;
	float spinsPerBlock = (135/(DIAMWHEEL*PI));

	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;

	while (nMotorEncoder[motorB] < (360*spinsPerBlock) )
	{
		motor[motorB] = SPEED;
		motor[motorC] = SPEED;
	}//End while


	nSyncedMotors=synchNone;

}//End straightForBlock()


//Implementing straightForBlockRev
//Moves straight in reverse for one block
void straightForBlockRev()
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;
	float spinsPerBlock = (135/(DIAMWHEEL*PI));

	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;

	while (nMotorEncoder[motorB] < -(360*spinsPerBlock) )
	{
		motor[motorB] = -SPEED;
		motor[motorC] = -SPEED;
	}//End while


	nSyncedMotors=synchNone;

}//End straightForBlockRev()


//Implementing checkSidesForBox
//When called, it will spin left, then right looking for black squares, and return different values depending on which blocks are white/black
int checkSidesForBox()
{
	int isLeftBlack=0;
	int isRightBlack=0;

	//Sending back 0 of neither are black, 1 if both are black, 2 if only right is black, and 3 if only left is black
	spinEncoder(-90);

	if (SensorValue(lightSensor) < 35)
	{
		isLeftBlack=1;
	}//End if

	spinEncoder(-180);

	if (SensorValue(lightSensor) < 35)
	{
		isRightBlack=1;
	}//End if

	spinEncoder(-90);

	//Returning one of the statements
	if (isLeftBlack==0 && isRightBlack==0)
	{
		return 0;
	}//End if

	if (isLeftBlack==1 && isRightBlack==1)
	{
		return 1;
	}//End if

	if (isLeftBlack==0 && isRightBlack==1)
	{
		return 2;
	}//End if

	if (isLeftBlack==1 && isRightBlack==0)
	{
		return 3;
	}//End if

	return 4; //4 will never be returned, only used to stop compiler errors

}//End checkSidesForBox


//Implementing checkForObst
//Checks to see if there's an obstacle on the current X line
bool checkForObst(int *X)
{
	int offset;
	offset=(*X)-3;


	if(*X==3)
	{
		if (SensorValue[sonarSensor]<13.5*4)
		{
			return true;
		}//End if
	}
	else
	{
		if (SensorValue[sonarSensor]<13.5*4+(*X))
		{
			return true;
		}//End if
	}//End outer if else

	return false;
	
}//End checkForObst


//Implementing checkForObstStart
//Checks to see if there's an obstacle on the starting Y line.
bool checkForObstStart()
{
	if (SensorValue[sonarSensor]<160)
	{
		return true;
	}//End if

	return false;
	
}//End checkForObstStart


//implementing returnPosStart
//One of the first things the bot does is look on the line that it's facing, this function will only be triggered if there' a block on that line
void recordPosStart(int *blockX, int *blockY, int *curPosX, int *curPosY)
{
	float distance=SensorValue[sonarSensor];
	int blocks=distance/13.5; //intentionally removing decimal places

	*blockY=*curPosY;
	*blockX=blocks;

}//End returnPosStart


//implementing returnPosUp
//Will only be triggered when the bot is already looking at a block, returning the block's position
void recordPosUp(int *blockX, int *blockY, int *curPosX, int *curPosY)
{
	float distance=SensorValue[sonarSensor];
	int blocks=distance/13.5; //intentionally removing decimal places

	*blockY=*curPosY - blocks;
	*blockX=*curPosX;
	
}//End returnPosUp


//implementing returnPosDown
//Will only be triggered when the bot is already looking at a block, returning the block's position
void recordPosDown(int *blockX, int *blockY, int *curPosX, int *curPosY)
{

	float distance=SensorValue[sonarSensor];
	int blocks=distance/13.5; //intentionally removing decimal places

	*blockY=*curPosY + blocks;
	*blockX=*curPosX;

}//End returnPosDown

//end assignment functions
