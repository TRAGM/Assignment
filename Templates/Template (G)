#pragma config(Sensor, S1,     touchSensor,    sensorTouch)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     soundSensor,    sensorSoundDB)
#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)

//Basic commands
void left(void);
void pivot_left(void);
void right(void);
void pivot_right(void);
void straight(int distance, int speed);

//straight till functions
void straight_till_touch(void);
void straight_till_sonar(void);
void straight_till_light(void);	//Incorrect, needs fixing.
void straight_till_clap(void);

//line tracking functions
void line_tracking_till_bumper(void);
void line_tracking_till_sonar(void);

//Sound
void sound_is_speed(void);

//Light
void straight_counting_lines(void);
void straight_till_lines(int no_of_lines);
int follow_line( int distance, int speed );

//Wheel ratio
int move_robot(int wheel_ratio, int distance);

#define TURN  715
#define SONAR_DIST 40
#define DEFAULT_DIST 1000
#define DEFAULT_SPEED 50
#define DFAULT_LINES 5



task main()
{
    //Calling the functions here
}//End main

void left()
{
	//Moving left
	motor[motorB] = 50;
	motor[motorC] = 0;
	wait1Msec(TURN);
}

void pivot_left()
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		while(nMotorEncoder[motorB] < 360 )
		{
				motor[motorC] = DEFAULT_SPEED ;
		}
}

void right()
{
	//Moving right
	motor[motorB] = 0;
	motor[motorC] = 50;
	wait1Msec(TURN);
}

void pivot_right()
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		while( nMotorEncoder[motorB] < 360 )
		{
				motor[motorB] = DEFAULT_SPEED ;
		}
}

void straight(int distance, int speed)
{
		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = 100 ;

		motor[motorB] = speed;
		wait1Msec(distance);
}

void straight_till_touch()
{
		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = 100 ;

    while(SensorValue(touchSensor) == 0)
    {
    		motor[motorB] = 100 ;
    }

    motor[motorB] = -75;
    wait1Msec(1000);
}

void straight_till_sonar()
{
		while(SensorValue(sonarSensor) > SONAR_DIST)
    {
        motor[motorB] = 75;
        motor[motorC] = 75;
    }
}

//Incorrect, needs fixing.
void straight_till_light()
{
    while(true)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
    	}
   }
}

void line_tracking_till_bumper()
{
    while(SensorValue(touchSensor) == 0)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
        }
    }
}

void line_tracking_till_sonar()
{
    while(SensorValue(sonarSensor) > SONAR_DIST)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
        }
   }
}

void straight_till_clap()
{
	wait1Msec(1000);

	while( true )
	{
			while(SensorValue(soundSensor) < 70)
			{
					motor[motorC] = 75;
					motor[motorB] = 75;
			}

			motor[motorC] = 0;
			motor[motorB] = 0;
			wait1Msec(2000);
		}
}

void sound_is_speed()
{
    while ( true )
    {
        motor[motorB] = SensorValue(soundSensor) ;
        motor[motorC] = SensorValue(soundSensor) ;
    }
}

/*
void arch(char L_R)
{
		if(L_R = L)
		{
				motor[motorB] =  50;
				motor[motorC] =  -;
				wait1Msec(50);
		}
		else()
}
*/

void straight_counting_lines()
{
		int count = 0 ;

		while(SensorValue(touchSensor) == 0)
		{
				if(SensorValue[lightSensor] > 45)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				else
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
						count ++ ;
						PlaySound(soundShortBlip);
				}
		}

		motor[motorC] = 0 ;
		motor[motorB] = 0 ;

		nxtDisplayBigStringAt( 0, 31, "%d", count );
		wait1Msec(5000);
}

int follow_line( int distance, int speed )
{

}

int move_robot ( int wheel_ratio, int distance )
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = wheel_ratio ;

		while(SensorValue(touchSensor) == 0)
		{
				while( nMotorEncoder[motorB] < distance )
				{
						motor[motorB] = DEFAULT_SPEED ;
						nxtDisplayBigStringAt( 0, 31, "%d",DEFAULT_SPEED );
				}
				return(1);
		}
		return(0);
}

void straight_till_lines(int no_of_lines)
{
		int count = 0 ;

		while( no_of_lines > 0 )
		{
				nxtDisplayBigStringAt( 0, 31, "%d", count );

				while(SensorValue[lightSensor] > 45)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				while(SensorValue[lightSensor] < 44)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				count ++ ;
				no_of_lines -- ;
				PlaySound(soundShortBlip);
		}
		motor[motorC] = 0 ;
		motor[motorB] = 0 ;
		wait1Msec(2000);
}
