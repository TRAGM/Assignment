#pragma config(Sensor, S1,     touchSensor,    sensorTouch)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     soundSensor,    sensorSoundDB)
#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)

#define SPEED 50


//Prototypes
void spinLeft (void);
void spinLeftEncoder (void);
void spinRight (void);
void spinRightEncoder (void);
void turnLeft (void);
void turnRight (void);
void waitSec(float seconds);
void stop (void);
void stopFor (float seconds);
void straight(void);
void straightFor (float seconds);
void straightForDist (int dist);
void straight (void);
void obstacleEncounter(void);
void countingLines (void);

task main()
{
	
	
}//End main



//Implementing spinLeft
void spinLeft()
{
	motor[motorB] = 50;
	motor[motorC] = -50;
	wait1Msec(257);
	
	stop();
	
}//End spinLeft



//Implementing spinLeftEncoder
void spinLeftEncoder()
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;

	while (nMotorEncoder[motorB] < 360)
	{
		motor[motorB] = SPEED;
		motor[motorC] = -SPEED;
	}//End while
	
	stop();
}//End spinLeftEncoder



//Implementing spinRight
void spinRight ()
{
	motor[motorB] = -50;
	motor[motorC] = 50;
	wait1Msec(257);
	
	stop();
}//End spinRight



//Implementing spinRightEncoder
void spinRightEncoder()
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;

	while (nMotorEncoder[motorC] < 360)
	{
		motor[motorB] = -SPEED;
		motor[motorC] = SPEED;
	}//End while
	
	stop();
}//End spinRightEncoder



//Implementing turnLeft (probably won't be used in the assignment)
void turnLeft()
{
	motor[motorB] = 50;
	motor[motorC] = 0;
	wait1Msec(695);
	
	stop();
}//End turnLeft



//Implementing turnRight (probably won't be used in the assignment)
void turnRight ()
{
	motor[motorB] = 0;
	motor[motorC] = 50;
	wait1Msec(695);
	
	stop();
}//End turnRight



//Implementing waitSec
void waitSec(float seconds)
{
	wait1Msec(seconds*1000);
}//End waitSec



//Implementing stop
void stop()
{
	motor[motorB] = 0;
	motor[motorC] = 0;
}//End stop



//Implementing stopFor
void stopFor (float seconds)
{
	motor[motorB] = 0;
	motor[motorC] = 0;
	wait1Msec(seconds*1000);
}//End stopFor



//Implementing straight
void straight ()
{
	motor[motorB] = SPEED;
	motor[motorC] = SPEED;
}//End straight



//Implementing straightFor
void straightFor (float seconds)
{
	motor[motorB] = SPEED;
	motor[motorC] = SPEED;
	wait1Msec(seconds*1000);
	
	stop();
	
}//End straightFor



//Implementing straightForDist (incomplete)
void straightForDist(int dist)
{
	nMotorEncoder[motorB] = 0;
	nMotorEncoder[motorC] = 0;

	while (nMotorEncoder[motorB] < 720)
	{
		motor[motorB] = 50;
		motor[motorC] = 50;
	}//End while
	
	stop();
	
}//End straightFor



//Implementing obstacleEncounter
void obstacleEncounter()
{
	spinLeft();
	straightFor(1);
	turnRight();
	straightFor(1);
	turnRight();
	straightFor(1);
	spinLeft();
}//End obstacleEncounter



//Implementing countingLines
void countingLines ()
{
	int count=0;
	int count2=0;

	while (true)
	{
		if (SensorValue(lightSensor) < 45)
		{
			while (count2==0)
			{
				if (SensorValue(lightSensor) > 45)
				{
					count++;
					count2=1;
					wait1Msec(20);
				}//End inner if
			}//End inner while
		}//End outer if
		count2=0;

	}//End outer while
}//End countingLines


