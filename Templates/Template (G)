#pragma config(Sensor, S1,     touchSensor,    sensorTouch)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     soundSensor,    sensorSoundDB)
#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)

//Assignment prototypes
void begin( int* x, int* y , int* direction, int* obj ) ;	//startup to begin the program
void position_change( int* x, int* y, int* direction );	//the X Y position of the robot
void sonar_check( int* obj, int* direction, int* x, int* y );	//checking if there's an object straight ahead of it
void move( int* direction ) ;
void return_to_start( int* obj ) ;	
void end(int* obj);
//End assignment prototypes

//Basic commands
void left(void);
void pivot_left(void);
void right(void);
void pivot_right(void);
void straight(int distance, int speed);

//straight till functions
void straight_till_touch(void);
void straight_till_sonar(void);
void straight_till_light(void);	//Incorrect, needs fixing.
void straight_till_clap(void);

//line tracking functions
void line_tracking_till_bumper(void);
void line_tracking_till_sonar(void);

//Sound
void sound_is_speed(void);

//Light
void straight_counting_lines(void);
void straight_till_lines(int no_of_lines);
int follow_line( int distance, int speed );

//Wheel ratio
int move_robot(int wheel_ratio, int distance);

#define TURN  715
#define SONAR_DIST 40
#define DEFAULT_DIST 1000
#define DEFAULT_SPEED 50
#define DFAULT_LINES 5

//assignment defines
#define SONAR_CHECK 200	//The distance the robot checks for an object (2 meters, larger than the board)
#define WIDTH 7					//x max value of the table
#define LENGTH 9				//y max value of the table
#define TOTAL_OBJS 2		//the total number of objects there are on the feild

task main()
{
	//declaring the variables needed
	int x;
	int y;
	int direction;
	int obj[WIDTH][LENGTH] ;	//[x][y]

	//Calling the functions here
	begin( &x, &y, &direction, obj ) ;
	
}//End main


//Assignment functions
void begin(int *x, int* y, int* direction, int* obj )
{
	*x = 0 ;   				//starting at 0 on the left, 6 to the right	0-6 on the default map
	*y = 0 ;   				//starting at 0 on the line it starts on		0-8 on the default map
	*direction = 0 ;

	sonar_check( obj, direction, x , y ) ;	//calling sonar_check because there could be an object in the first column
}//end function "begin"

//when the robot moves this can be called to keep track of where it is
void position_change( int* x, int* y, int* direction )
{
	//these cases change the value of "x" or "y" so the robot knows where it is
	switch( (abs( *direction ))%4)	//the positive version of direction modulus 4
	{
		case(0):	//facing North, default direction
		{
			*y ++ ;
		}

		case(1):	//facing East, right
		{
			*x ++ ;
		}

		case(2):	//facing Sount, 180 degrees to what it was originally looking at
		{
			*y -- ;
		}

		case(3):	//facing West, left
		{
			*x -- ;
		}//last case

	}//end switch statement
}//end function "position_change"

//sonar_check checks if there is an object in front of the robot
void sonar_check(int* obj, int* direction, int* x, int* y)
{
	int dist = 0 ;		//dist is the number of blocks the object is between the robot and the object
	int temp = 0 ;		//temp is a temp variable used to store pre calculated data
	static int i = 0 ;//static int i to keep it loaded in memory  but unique to the function

	if(SensorValue(sonarSensor) < SONAR_CHECK)
	{
    		temp = SensorValue(sonarSensor) ;
    		dist = temp/13.5 ;		//each square is roughly 13.5 centimeters

    		switch( (abs( *direction ))%4)	//the positive version of direction modulus 4
		{
			case(0):
			{
				obj[i] = *x ;								//x value
				obj[i++] = ( *y + dist ) ;	//y value
				i ++ ;											// incrementing "i" so we can assign obj 2 into the array
			}

			case(1):
			{
				obj[i] = ( *x + dist ) ;		//x value
				obj[i++] = *y ;							//y value
				i ++ ;											// incrementing "i" so we can assign obj 2 into the array
			}

			case(2):
			{
				obj[i] = *x ;								//x value
				obj[i++] = ( *y + dist ) ;	//y value
				i ++ ;											// incrementing "i" so we can assign obj 2 into the array
			}

			case(3):
			{
				obj[i] = ( *x + dist ) ;		//x value
				obj[i++] = *y ;							//y value
				i ++ ;											// incrementing "i" so we can assign obj 2 into the array
			}//last case
		}//end switch statement
	}//end if statement, checks if there's a block in the line

	//checking if both object have been found
	if( i ==  ( TOTAL_OBJS * 2 ) )		//TOTAL)OBJS is the number of objects with 1 x and 1 y value for each
	{
    		return_to_start( obj, *x, *y ) ;
    	}
}//end function "sonar_check"

void move( int* direction )
{
	while(SensorValue[lightSensor] > 45)
	{
		motor[motorC] = 50 ;
		motor[motorB] = 50 ;
	}
	wait1Msec( 100 ) ;

	if(SensorValue[lightSensor] > 45)
	{
		motor[motorC] = 50 ;
		motor[motorB] = 50 ;
	}
}

//displaying the map to the nxt screen
void end( int* obj )
{
	for( int i ; i < WIDTH ; i ++ )
	{
		for( int j ; j < LENGTH ; j ++ )
		{
			nxtDisplayTextLine( *obj[][] ) ;
		}
	}

}

void return_to_start( int* obj, int* x, int* y )
{
	//return to start

	//pythagoras' therom to decide which block is closest
	int j = 0 ;
	int temp ;
	int adjacent ;
	int opposite ;
	int hyponymous ;

	adjacent = ( abs(obj[ j ]) )*( abs(obj[ j ]) ) ;
	opposite = (obj[ j + 1 ])*(*obj[ j + 1 ]) ;					//"pow" function may work in robotc, but I wasn't sure so I did it manually
	temp = (opposite*opposite) + (adjacent*adjacent) ;
	hyponymous = sqrt(temp);

/*													^
													/	I
			Hyponymous				/		I		Opposite
											/_____I
											Adjacent								(style points)
*/
//This code in GitHub/Borlands doesn't format well but in RobotC it works better.
}

//end assignment functions


void left()
{
	//Moving left
	motor[motorB] = 50;
	motor[motorC] = 0;
	wait1Msec(TURN);
}

void pivot_left()
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		while(nMotorEncoder[motorB] < 360 )
		{
				motor[motorC] = DEFAULT_SPEED ;
		}
}

void right()
{
	//Moving right
	motor[motorB] = 0;
	motor[motorC] = 50;
	wait1Msec(TURN);
}

void pivot_right()
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		while( nMotorEncoder[motorB] < 360 )
		{
				motor[motorB] = DEFAULT_SPEED ;
		}
}

void straight(int distance, int speed)
{
		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = 100 ;

		motor[motorB] = speed;
		wait1Msec(distance);
}

void straight_till_touch()
{
		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = 100 ;

    while(SensorValue(touchSensor) == 0)
    {
    		motor[motorB] = 100 ;
    }

    motor[motorB] = -75;
    wait1Msec(1000);
}

void straight_till_sonar()
{
		while(SensorValue(sonarSensor) > SONAR_DIST)
    {
        motor[motorB] = 75;
        motor[motorC] = 75;
    }
}

//Incorrect, needs fixing.
void straight_till_light()
{
    while(true)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
    	}
   }
}

void line_tracking_till_bumper()
{
    while(SensorValue(touchSensor) == 0)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
        }
    }
}

void line_tracking_till_sonar()
{
    while(SensorValue(sonarSensor) > SONAR_DIST)
    {
        if(SensorValue[lightSensor] < 45)
        {
            motor[motorB] = 30;
            motor[motorC] = 25;
        }
        else
        {
            motor[motorB] = 25;
            motor[motorC] = 30;
        }
   }
}

void straight_till_clap()
{
	wait1Msec(1000);

	while( true )
	{
			while(SensorValue(soundSensor) < 70)
			{
					motor[motorC] = 75;
					motor[motorB] = 75;
			}

			motor[motorC] = 0;
			motor[motorB] = 0;
			wait1Msec(2000);
		}
}

void sound_is_speed()
{
    while ( true )
    {
        motor[motorB] = SensorValue(soundSensor) ;
        motor[motorC] = SensorValue(soundSensor) ;
    }
}

/*
void arch(char L_R)
{
		if(L_R = L)
		{
				motor[motorB] =  50;
				motor[motorC] =  -;
				wait1Msec(50);
		}
		else()
}
*/

void straight_counting_lines()
{
		int count = 0 ;

		while(SensorValue(touchSensor) == 0)
		{
				if(SensorValue[lightSensor] > 45)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				else
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
						count ++ ;
						PlaySound(soundShortBlip);
				}
		}

		motor[motorC] = 0 ;
		motor[motorB] = 0 ;

		nxtDisplayBigStringAt( 0, 31, "%d", count );
		wait1Msec(5000);
}

int follow_line( int distance, int speed )
{

}

int move_robot ( int wheel_ratio, int distance )
{
		nMotorEncoder[motorB] = 0 ;
		nMotorEncoder[motorC] = 0 ;

		nSyncedMotors = synchBC ;
		nSyncedTurnRatio = wheel_ratio ;

		while(SensorValue(touchSensor) == 0)
		{
				while( nMotorEncoder[motorB] < distance )
				{
						motor[motorB] = DEFAULT_SPEED ;
						nxtDisplayBigStringAt( 0, 31, "%d",DEFAULT_SPEED );
				}
				return(1);
		}
		return(0);
}

void straight_till_lines(int no_of_lines)
{
		int count = 0 ;

		while( no_of_lines > 0 )
		{
				nxtDisplayBigStringAt( 0, 31, "%d", count );

				while(SensorValue[lightSensor] > 45)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				while(SensorValue[lightSensor] < 44)
				{
						motor[motorC] = 50 ;
						motor[motorB] = 50 ;
				}
				count ++ ;
				no_of_lines -- ;
				PlaySound(soundShortBlip);
		}
		motor[motorC] = 0 ;
		motor[motorB] = 0 ;
		wait1Msec(2000);
}
